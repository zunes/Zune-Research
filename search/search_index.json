{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Home \u00b6 Welcome, my name is Lars and this is my digital garden about the Zune ! Here I will be sharing all the information I find about the Zune. I will mostly talk about its hardware / firmware and how to develop applications for it more than 20 years after it was first published. Most of the information will revolve around the Zune HD as it has the best hardware and is less secure than the older models. For a guide on how to install the OpenZDK click here . Files marked with \ud83d\uddfa\ufe0f (World Map Emoji) are overview notes and link you to all the subtopics in that topic. Topics \u00b6 \ud83d\uddfa\ufe0f OpenZDK \ud83d\uddfa\ufe0f OpenGL ES \ud83d\uddfa\ufe0f Official Documentation \ud83d\uddfa\ufe0f Windows CE 6.0 \ud83d\uddfa\ufe0f File Types \ud83d\uddfa\ufe0f XNA Framework Workbench contains bunch of info. I add stuff quickly there during research so I don't forget it.","title":"Home"},{"location":"#home","text":"Welcome, my name is Lars and this is my digital garden about the Zune ! Here I will be sharing all the information I find about the Zune. I will mostly talk about its hardware / firmware and how to develop applications for it more than 20 years after it was first published. Most of the information will revolve around the Zune HD as it has the best hardware and is less secure than the older models. For a guide on how to install the OpenZDK click here . Files marked with \ud83d\uddfa\ufe0f (World Map Emoji) are overview notes and link you to all the subtopics in that topic.","title":"Home"},{"location":"#topics","text":"\ud83d\uddfa\ufe0f OpenZDK \ud83d\uddfa\ufe0f OpenGL ES \ud83d\uddfa\ufe0f Official Documentation \ud83d\uddfa\ufe0f Windows CE 6.0 \ud83d\uddfa\ufe0f File Types \ud83d\uddfa\ufe0f XNA Framework Workbench contains bunch of info. I add stuff quickly there during research so I don't forget it.","title":"Topics"},{"location":"Activating%20Visual%20Studio%202008%20Profressional/","text":"Activating VS 2008 Professional \u00b6 Download WinSpy - Catch22 Run as Admin Goto Control Panel -> Uninstall a Program Search for Microsoft Visual Studio 2008 Professional Edition Right Click and then click Uninstall/Change Click next after loading finishes Use WinSpy to make the activation boxes visible Drag the finder tool to one of the hidden controls of the Maintenance Window In WinSpy go to the Styles tab Click the three dots next to Window Styles Remove WS_DISABLED Add WS_VISIBLE Click Apply Repeat for the remaining controls Enter a licence key (can be found online) Click Upgrade After step 4 the window should look like this: References \u00b6 Upgrading Visual Studio 2008 from trial to full on Windows 7 Beta (Build 7000) - Stack Overflow \ud83d\uddfa\ufe0f OpenZDK","title":"Activating VS 2008 Professional"},{"location":"Activating%20Visual%20Studio%202008%20Profressional/#activating-vs-2008-professional","text":"Download WinSpy - Catch22 Run as Admin Goto Control Panel -> Uninstall a Program Search for Microsoft Visual Studio 2008 Professional Edition Right Click and then click Uninstall/Change Click next after loading finishes Use WinSpy to make the activation boxes visible Drag the finder tool to one of the hidden controls of the Maintenance Window In WinSpy go to the Styles tab Click the three dots next to Window Styles Remove WS_DISABLED Add WS_VISIBLE Click Apply Repeat for the remaining controls Enter a licence key (can be found online) Click Upgrade After step 4 the window should look like this:","title":"Activating VS 2008 Professional"},{"location":"Activating%20Visual%20Studio%202008%20Profressional/#references","text":"Upgrading Visual Studio 2008 from trial to full on Windows 7 Beta (Build 7000) - Stack Overflow \ud83d\uddfa\ufe0f OpenZDK","title":"References"},{"location":"CE%206.0%20Architecture/","text":"CE 6.0 Architecture \u00b6 System Files/Components \u00b6 K.xxx.DLL \u00b6 These DLLs reflect the same DLLs without the K in front of it, but live in Kernel space. This way when porting old drivers from Windows CE 5.0 (where all drivers lived in user mode) the code can simply call the same API, but it does not need to perform a context switch. User mode calls are handled by Coredll.dll and calls from processes running in kernel mode are redirected to Kernel.DLL by K.Coredll.DLL so that the call stays in the same VM. This way the calls are way faster compared to Windows CE 5.0. Any DLL that is use by both kernel-mode and user-mode processes will be loaded as both kernel-mode and user-mode. Services \u00b6 Services run in user-mode and are handled by the Services Manager . Device Manager \u00b6 The Device Manager ( Device.DLL ) runs in kernel-mode and loads the device drivers. It supports loading drivers on boot or on demand. Windows also provides a user-mode Device Manager for drivers installed after shipping for example. NK.EXE \u00b6 This used to be the kernel, but now it just contains a thin abstraction layer and compatibility layer, provided by the OEM. The actual Kernel now lives in Kernel.DLL . Security \u00b6 Windows CE 6.0 removed both the \"all kernel mode\" (running everything in kernel mode) feature and the trusted model (trusted and untrusted .EXEs and DLLs). It also does not have the Access Control List of newer desktop systems. The system also provides a separate handle table for each process. GWES \u00b6 GWES provides graphical functionality. Memory Layout \u00b6 Microsoft - Memory Layout References \u00b6 Microsoft - Windows Embedded CE 6.0 Advanced Memory Management Microsoft - Windows Embedded CE Architecture \ud83d\uddfa\ufe0f Windows CE 6.0","title":"CE 6.0 Architecture"},{"location":"CE%206.0%20Architecture/#ce-60-architecture","text":"","title":"CE 6.0 Architecture"},{"location":"CE%206.0%20Architecture/#system-filescomponents","text":"","title":"System Files/Components"},{"location":"CE%206.0%20Architecture/#kxxxdll","text":"These DLLs reflect the same DLLs without the K in front of it, but live in Kernel space. This way when porting old drivers from Windows CE 5.0 (where all drivers lived in user mode) the code can simply call the same API, but it does not need to perform a context switch. User mode calls are handled by Coredll.dll and calls from processes running in kernel mode are redirected to Kernel.DLL by K.Coredll.DLL so that the call stays in the same VM. This way the calls are way faster compared to Windows CE 5.0. Any DLL that is use by both kernel-mode and user-mode processes will be loaded as both kernel-mode and user-mode.","title":"K.xxx.DLL"},{"location":"CE%206.0%20Architecture/#services","text":"Services run in user-mode and are handled by the Services Manager .","title":"Services"},{"location":"CE%206.0%20Architecture/#device-manager","text":"The Device Manager ( Device.DLL ) runs in kernel-mode and loads the device drivers. It supports loading drivers on boot or on demand. Windows also provides a user-mode Device Manager for drivers installed after shipping for example.","title":"Device Manager"},{"location":"CE%206.0%20Architecture/#nkexe","text":"This used to be the kernel, but now it just contains a thin abstraction layer and compatibility layer, provided by the OEM. The actual Kernel now lives in Kernel.DLL .","title":"NK.EXE"},{"location":"CE%206.0%20Architecture/#security","text":"Windows CE 6.0 removed both the \"all kernel mode\" (running everything in kernel mode) feature and the trusted model (trusted and untrusted .EXEs and DLLs). It also does not have the Access Control List of newer desktop systems. The system also provides a separate handle table for each process.","title":"Security"},{"location":"CE%206.0%20Architecture/#gwes","text":"GWES provides graphical functionality.","title":"GWES"},{"location":"CE%206.0%20Architecture/#memory-layout","text":"Microsoft - Memory Layout","title":"Memory Layout"},{"location":"CE%206.0%20Architecture/#references","text":"Microsoft - Windows Embedded CE 6.0 Advanced Memory Management Microsoft - Windows Embedded CE Architecture \ud83d\uddfa\ufe0f Windows CE 6.0","title":"References"},{"location":"Device%20Manager/","text":"Device Manger \u00b6 The device manager loads device drivers and manages their resources. Security \u00b6 Taken from Microsoft - Device Manager Security : In Windows Embedded CE 6.0, the kernel performs a full access check on first level buffer pointer parameters. This access check eliminates the need for validation to be performed by the device driver. However, a driver must still verify that the caller has access to memory addressed by embedded pointers using CeOpenCallerBuffer and CeCloseCallerBuffer . For additional information, see the Migrating a Windows Embedded CE Driver to Windows Embedded CE 6.0 . References \u00b6 Microsoft - Device Manager Architecture Microsoft - Device Manager Security \ud83d\uddfa\ufe0f Windows CE 6.0","title":"Device Manger"},{"location":"Device%20Manager/#device-manger","text":"The device manager loads device drivers and manages their resources.","title":"Device Manger"},{"location":"Device%20Manager/#security","text":"Taken from Microsoft - Device Manager Security : In Windows Embedded CE 6.0, the kernel performs a full access check on first level buffer pointer parameters. This access check eliminates the need for validation to be performed by the device driver. However, a driver must still verify that the caller has access to memory addressed by embedded pointers using CeOpenCallerBuffer and CeCloseCallerBuffer . For additional information, see the Migrating a Windows Embedded CE Driver to Windows Embedded CE 6.0 .","title":"Security"},{"location":"Device%20Manager/#references","text":"Microsoft - Device Manager Architecture Microsoft - Device Manager Security \ud83d\uddfa\ufe0f Windows CE 6.0","title":"References"},{"location":"Firmware%20Files/","text":"Firmware Files \u00b6 The following Information was taken from xda-developers forum: The Zune uses the B000FF file format for its firmware. It is used by Windows CE devices to write to flash memory. It saves space by skipping empty areas. There is a tutorial on how to use the tools at the bottom . File Format \u00b6 Header \u00b6 struct BIN_HEADER { char[7] Signature; // B000FF\\n signature DWORD ImageStart; // Image Start DWORD ImageLength; // Image Length }; Binary Block \u00b6 struct BIN_BLOCK { DWORD Address; // Address where the block should be flashed DWORD Size; // Size of the block that is being flashed DWORD Checksum; // Checksum (CRC32) of the block data }; [[TODO]]: Rewrite the text bellow: How it works \u00b6 The file starts with the header structure, followed by N number of block structures each one followed by the respective data of the block. A block with Address / Size / Checksum set to 0 is a termination block and marks the end of the file. Note that some blocks can be missing and depending on the bootloader the region could be left untouched or erased (erased bytes could have any value, it depends on the type of memory (NAND erased bytes have FF value) and on the bootloader). How to check the integrity of a B000FF file \u00b6 Read the header, read the first block and check that its address equals ImageStart , check that the termination block is present and check that the last block before the termination block address equals the sum of ImageStart + ImageLength . How to convert a B000FF file to an absolute binary format file (NB0) \u00b6 Allocate an empty file with the size of ImageLength and write each of the blocks' data inside at the absolute file position of Block Address - ImageStart . The missing blocks are usually empty areas (or at least that's what are in the files generated by Microsoft tools) that could be ignored by the bootloader or erased (with the bytes values depending on the memory type and on the bootloader code) but in case you encounter them make sure you investigate what those missing belong to, it could be a fancy way for the manufacturer to leave some areas reserved for the phone or bootloader and should be left untouched when re-creating the file. Current tools available to work with BIN files \u00b6 CVRTBIN/VIEWBIN to convert the file to a \"ROM\" file (ABX/NB0/ROM memory image, call it how you want) OSNBTOOL (suggested, because it lets you figure out what is in the file) that can do the following operating: split (-sp): finds the OS.NB inside the BIN and saves the OS.NB and the unrecognized data that comes before and after it generate BIN (-2bin): converts a file to the BIN format and has two important switches, one to set the start address of the data and one to tell it to not write the header (so that you can example append other BIN data in front of it) fix BIN header (-fixbinheader) scans the BIN file and adjusts the imagestart and imagelength according to the content Dumping Tutorial \u00b6 Get the start and the length of the Image $ viewbin.exe nk.bin shell ViewBin... NK.bin Image Start = 0x00014000, length = 0x00B7A4E4 Start address = 0x00023F10 Note down the Image Start and the length Convert the .bin file to a absolute .nb0 file $ cvrtbin -r -a IMAGE_START -w 32 -l LENGTH nk.bin Replace IMAGE_START and LENGTH with the values from the last step. Finnaly dump the contents of the rom $ dumprom.exe -d dump -v -5 nk.nb0 \u26a0\ufe0f The folder specifies with -d must exist before executing the command. These steps can be repeated with the other files as well. Dumprom.exe source code \u00b6 https://nah6.com/~itsme/cvs-xdadevtools/dumprom/ \ud83d\uddfa\ufe0f File Types","title":"Firmware Files"},{"location":"Firmware%20Files/#firmware-files","text":"The following Information was taken from xda-developers forum: The Zune uses the B000FF file format for its firmware. It is used by Windows CE devices to write to flash memory. It saves space by skipping empty areas. There is a tutorial on how to use the tools at the bottom .","title":"Firmware Files"},{"location":"Firmware%20Files/#file-format","text":"","title":"File Format"},{"location":"Firmware%20Files/#header","text":"struct BIN_HEADER { char[7] Signature; // B000FF\\n signature DWORD ImageStart; // Image Start DWORD ImageLength; // Image Length };","title":"Header"},{"location":"Firmware%20Files/#binary-block","text":"struct BIN_BLOCK { DWORD Address; // Address where the block should be flashed DWORD Size; // Size of the block that is being flashed DWORD Checksum; // Checksum (CRC32) of the block data }; [[TODO]]: Rewrite the text bellow:","title":"Binary Block"},{"location":"Firmware%20Files/#how-it-works","text":"The file starts with the header structure, followed by N number of block structures each one followed by the respective data of the block. A block with Address / Size / Checksum set to 0 is a termination block and marks the end of the file. Note that some blocks can be missing and depending on the bootloader the region could be left untouched or erased (erased bytes could have any value, it depends on the type of memory (NAND erased bytes have FF value) and on the bootloader).","title":"How it works"},{"location":"Firmware%20Files/#how-to-check-the-integrity-of-a-b000ff-file","text":"Read the header, read the first block and check that its address equals ImageStart , check that the termination block is present and check that the last block before the termination block address equals the sum of ImageStart + ImageLength .","title":"How to check the integrity of a B000FF file"},{"location":"Firmware%20Files/#how-to-convert-a-b000ff-file-to-an-absolute-binary-format-file-nb0","text":"Allocate an empty file with the size of ImageLength and write each of the blocks' data inside at the absolute file position of Block Address - ImageStart . The missing blocks are usually empty areas (or at least that's what are in the files generated by Microsoft tools) that could be ignored by the bootloader or erased (with the bytes values depending on the memory type and on the bootloader code) but in case you encounter them make sure you investigate what those missing belong to, it could be a fancy way for the manufacturer to leave some areas reserved for the phone or bootloader and should be left untouched when re-creating the file.","title":"How to convert a B000FF file to an absolute binary format file (NB0)"},{"location":"Firmware%20Files/#current-tools-available-to-work-with-bin-files","text":"CVRTBIN/VIEWBIN to convert the file to a \"ROM\" file (ABX/NB0/ROM memory image, call it how you want) OSNBTOOL (suggested, because it lets you figure out what is in the file) that can do the following operating: split (-sp): finds the OS.NB inside the BIN and saves the OS.NB and the unrecognized data that comes before and after it generate BIN (-2bin): converts a file to the BIN format and has two important switches, one to set the start address of the data and one to tell it to not write the header (so that you can example append other BIN data in front of it) fix BIN header (-fixbinheader) scans the BIN file and adjusts the imagestart and imagelength according to the content","title":"Current tools available to work with BIN files"},{"location":"Firmware%20Files/#dumping-tutorial","text":"Get the start and the length of the Image $ viewbin.exe nk.bin shell ViewBin... NK.bin Image Start = 0x00014000, length = 0x00B7A4E4 Start address = 0x00023F10 Note down the Image Start and the length Convert the .bin file to a absolute .nb0 file $ cvrtbin -r -a IMAGE_START -w 32 -l LENGTH nk.bin Replace IMAGE_START and LENGTH with the values from the last step. Finnaly dump the contents of the rom $ dumprom.exe -d dump -v -5 nk.nb0 \u26a0\ufe0f The folder specifies with -d must exist before executing the command. These steps can be repeated with the other files as well.","title":"Dumping Tutorial"},{"location":"Firmware%20Files/#dumpromexe-source-code","text":"https://nah6.com/~itsme/cvs-xdadevtools/dumprom/ \ud83d\uddfa\ufe0f File Types","title":"Dumprom.exe source code"},{"location":"Gem%20Files/","text":"Gem Files \u00b6 Gem Files are essentially .XZP files (from XBOX) and pack multiple GUI related files into one archive. They contain the resources like images, layouts, controls, localization data, and so on. They are created using the Xbox UI Tool which is part of the XBOX SDK. Gem/XZP Files can be unpacked, and contain .XUI , .XUR and .XUS files. A Tool called XUIWorkshop was used to edit later versions of the file used by the XBOX. The expected version (found in the header of the file) is 8 but the Zune's gem files are at Version 5 . The official tool ( XUITool ) to edit the UI was shipped with the XBOX SDK. Tools \u00b6 Tools/XzpTool 2.exe : Can be used to extract the files. \ud83d\uddfa\ufe0f File Types","title":"Gem Files"},{"location":"Gem%20Files/#gem-files","text":"Gem Files are essentially .XZP files (from XBOX) and pack multiple GUI related files into one archive. They contain the resources like images, layouts, controls, localization data, and so on. They are created using the Xbox UI Tool which is part of the XBOX SDK. Gem/XZP Files can be unpacked, and contain .XUI , .XUR and .XUS files. A Tool called XUIWorkshop was used to edit later versions of the file used by the XBOX. The expected version (found in the header of the file) is 8 but the Zune's gem files are at Version 5 . The official tool ( XUITool ) to edit the UI was shipped with the XBOX SDK.","title":"Gem Files"},{"location":"Gem%20Files/#tools","text":"Tools/XzpTool 2.exe : Can be used to extract the files. \ud83d\uddfa\ufe0f File Types","title":"Tools"},{"location":"Keep%20WIFI%20Enabled/","text":"Keep WIFI Enabled \u00b6 NOTE: This is just some research Interesting entry on Zune Boards \u00b6 WLAN Timeout Hack - Zune Boards Keep WIFI enabled on WM5 Devices \u00b6 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Suspend\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Resuming\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Unattended\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 \ud83d\uddfa\ufe0f Windows CE 6.0","title":"Keep WIFI Enabled"},{"location":"Keep%20WIFI%20Enabled/#keep-wifi-enabled","text":"NOTE: This is just some research","title":"Keep WIFI Enabled"},{"location":"Keep%20WIFI%20Enabled/#interesting-entry-on-zune-boards","text":"WLAN Timeout Hack - Zune Boards","title":"Interesting entry on Zune Boards"},{"location":"Keep%20WIFI%20Enabled/#keep-wifi-enabled-on-wm5-devices","text":"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Suspend\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Resuming\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Power\\State\\Unattended\\{98C5250D-C29A-4985-AE5F-AFE5367E5006} -change (Default) DWORD Dec to 1 \ud83d\uddfa\ufe0f Windows CE 6.0","title":"Keep WIFI enabled on WM5 Devices"},{"location":"Liberate/","text":"Liberate \u00b6 Liberate is a application developed by Netrix which makes it possible to use the explorer.exe on your Zune. It also provides functionality to run OpenGL, DirectX and Windows Apps on Liberate. WIFI Problem \u00b6 The Zune automatically disables its WIFI connection after a few minutes to save battery. This is a huge problem when trying to run the Windows CE Remote debugging tools through Liberate for example. Liberate actually implemented a somewhat working fix in RelayInput.exe , which just pings google.com and yahoo.com every couple of mins. Unfortunately this fix never starts as Liberate checks ZDKCloud_IsConnected() to see if it can reach the Zune cloud. Which nowadays always returns FALSE as the Zune Cloud does not exist anymore. I am currently looking for a way to really fix this. \ud83d\uddfa\ufe0f OpenZDK","title":"Liberate"},{"location":"Liberate/#liberate","text":"Liberate is a application developed by Netrix which makes it possible to use the explorer.exe on your Zune. It also provides functionality to run OpenGL, DirectX and Windows Apps on Liberate.","title":"Liberate"},{"location":"Liberate/#wifi-problem","text":"The Zune automatically disables its WIFI connection after a few minutes to save battery. This is a huge problem when trying to run the Windows CE Remote debugging tools through Liberate for example. Liberate actually implemented a somewhat working fix in RelayInput.exe , which just pings google.com and yahoo.com every couple of mins. Unfortunately this fix never starts as Liberate checks ZDKCloud_IsConnected() to see if it can reach the Zune cloud. Which nowadays always returns FALSE as the Zune Cloud does not exist anymore. I am currently looking for a way to really fix this. \ud83d\uddfa\ufe0f OpenZDK","title":"WIFI Problem"},{"location":"OpenZDK%20Reference/","text":"Open ZDK Reference \u00b6 Here is a list of all the OpenZDK libraries (this list it not done yet) and their function signatures. Note that not all of the function signatures have been reverse engineered by the original team. Also make sure to either define ZUNE_HD or ZUNE_SD (for all other models) before compiling your project. Note: Function signatures that are commented out have not yet been reverse engineered. Note: zdkgl.h (use the Tegra headers instead), zdkcloud.h (Zune Cloud does not exist anymore), zcontent.h have been omitted, as they don't provide any useable functionality nowadays. zdk.h \u00b6 This file just includes all other ZDK header files. zdkaudio.h \u00b6 DLL: zdksystem.dll Coverage: 16 / 16 Description: Play audio on the Zune. zdkcontent.h \u00b6 DLL: zdksystem.dll Coverage: 4 / 7 Description: Open XNA Storage Containers / ZCP Files zdkdisplay.h \u00b6 DLL: zdksystem.dll Coverage: 22 / 23 Description: Functionality for 2D rendering (with DirectX or DirectDraw??) zdkfont.h \u00b6 DLL: ??? Coverage: 7 / 8 Description: Text Rendering zdkimage.h \u00b6 DLL: ??? Coverage: ??? Description: Image Loading/Processing zdkinput.h \u00b6 DLL: ??? Coverage: ??? Description: Get touch and accelerometer data \ud83d\uddfa\ufe0f OpenZDK","title":"Open ZDK Reference"},{"location":"OpenZDK%20Reference/#open-zdk-reference","text":"Here is a list of all the OpenZDK libraries (this list it not done yet) and their function signatures. Note that not all of the function signatures have been reverse engineered by the original team. Also make sure to either define ZUNE_HD or ZUNE_SD (for all other models) before compiling your project. Note: Function signatures that are commented out have not yet been reverse engineered. Note: zdkgl.h (use the Tegra headers instead), zdkcloud.h (Zune Cloud does not exist anymore), zcontent.h have been omitted, as they don't provide any useable functionality nowadays.","title":"Open ZDK Reference"},{"location":"OpenZDK%20Reference/#zdkh","text":"This file just includes all other ZDK header files.","title":"zdk.h"},{"location":"OpenZDK%20Reference/#zdkaudioh","text":"DLL: zdksystem.dll Coverage: 16 / 16 Description: Play audio on the Zune.","title":"zdkaudio.h"},{"location":"OpenZDK%20Reference/#zdkcontenth","text":"DLL: zdksystem.dll Coverage: 4 / 7 Description: Open XNA Storage Containers / ZCP Files","title":"zdkcontent.h"},{"location":"OpenZDK%20Reference/#zdkdisplayh","text":"DLL: zdksystem.dll Coverage: 22 / 23 Description: Functionality for 2D rendering (with DirectX or DirectDraw??)","title":"zdkdisplay.h"},{"location":"OpenZDK%20Reference/#zdkfonth","text":"DLL: ??? Coverage: 7 / 8 Description: Text Rendering","title":"zdkfont.h"},{"location":"OpenZDK%20Reference/#zdkimageh","text":"DLL: ??? Coverage: ??? Description: Image Loading/Processing","title":"zdkimage.h"},{"location":"OpenZDK%20Reference/#zdkinputh","text":"DLL: ??? Coverage: ??? Description: Get touch and accelerometer data \ud83d\uddfa\ufe0f OpenZDK","title":"zdkinput.h"},{"location":"OpenZDK%20Setup/","text":"OpenZDK Setup \u00b6 This step by step guide will show you how to install all the tools needed to develop OpenZDK Apps on Windows 10. Make sure to follow all the steps in the right order. Note: Installing the actual OpenZDK is only necessary if you want to develop applications or use tooling associated with it. You can download all the installers (except Visual Studio 2008) from here . Visual Studio 2008 Pro (90 day trial) can be downloaded from Microsoft here . Installing prerequisites \u00b6 Install Visual Studio 2008 Professional Make sure to select Smart Device Programmability when installing. This is only available in the Pro versions of Visual studio. (Optional) Install Visual Studio 2008 SP1 Install XNA Game Studio 3.1 ( XNAGS31_setup.exe ) On Windows 10 this needs some extra steps as the installer is broken. Thanks to this Reddit Post for elaborating how to extract the installer: Open a Command Prompt and navigate to the directory of the installer Run the installer with the /x option like this: XNA3.1.exe /x Run every MSI installer you see that got extracted Run everything in C:\\Program Files (x86)\\Microsoft XNA\\XNA Game Studio\\v3.1\\Setup Install Zune HD extensions for XNA Game Studio.msi Setup your Zune in XNA Game Studio \u00b6 Plug in your Zune and make sure that the Zune Software is completely closed. Open XNA Game Studio Device Center which is located at C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\XNA\\Device Center Click Add Device , then Zune Select your Zune and continue through the remaining steps Install OpenZDK \u00b6 Close all instances of Visual Studio Install the OpenZDK ( openzdk-hd-4.5-20100414.msi ), can be found in the Quick Start Kit Select Custom installation type Set Documentation to Entire feature will be unavailable - The docs are only available if you have Visual Studio 2005 installed, and don't provide any OpenZDK specific information anyways Continue through the remaining steps Install the Platform Support Pack (for OpenGL) \u00b6 Install Standard SDK for Windows CE 5.0 ( STANDARD_SDK.msi ): The Nvidia installer needs this to finish installing Install NVIDIA Tegra 250 Platform Support Pack ( ce6_tegra_250_5265393.msi ): This contains all the library needed to use the NVIDIA hardware Setting up Visual Studio for development \u00b6 Updating the include path In Visual Studio select Options > Tools > Projects and Solutions > VC++ Directories Select OpenZDK (ARMV4I) from the Platform dropdown Select Include files from the Show directories for dropdown Click the New line button Enter $(NV_WINCE_T2_PLAT)\\include and press enter Updating the library path Select Library files from the Show directories for dropdown Click the New line button Enter $(NV_WINCE_T2_PLAT)\\lib\\release and press enter That's it! Have fun developing :) Check out the \ud83d\uddfa\ufe0f Official Documentation or OpenZDK Reference for more information about the available APIs. To activate VS 2008 look here . References \u00b6 Reddit - Finally got XNA 3.1 studio running ZuneDevWiki - Installing prerequisites ZuneDevWiki - Preparing the Zune development environment \ud83d\uddfa\ufe0f OpenZDK","title":"OpenZDK Setup"},{"location":"OpenZDK%20Setup/#openzdk-setup","text":"This step by step guide will show you how to install all the tools needed to develop OpenZDK Apps on Windows 10. Make sure to follow all the steps in the right order. Note: Installing the actual OpenZDK is only necessary if you want to develop applications or use tooling associated with it. You can download all the installers (except Visual Studio 2008) from here . Visual Studio 2008 Pro (90 day trial) can be downloaded from Microsoft here .","title":"OpenZDK Setup"},{"location":"OpenZDK%20Setup/#installing-prerequisites","text":"Install Visual Studio 2008 Professional Make sure to select Smart Device Programmability when installing. This is only available in the Pro versions of Visual studio. (Optional) Install Visual Studio 2008 SP1 Install XNA Game Studio 3.1 ( XNAGS31_setup.exe ) On Windows 10 this needs some extra steps as the installer is broken. Thanks to this Reddit Post for elaborating how to extract the installer: Open a Command Prompt and navigate to the directory of the installer Run the installer with the /x option like this: XNA3.1.exe /x Run every MSI installer you see that got extracted Run everything in C:\\Program Files (x86)\\Microsoft XNA\\XNA Game Studio\\v3.1\\Setup Install Zune HD extensions for XNA Game Studio.msi","title":"Installing prerequisites"},{"location":"OpenZDK%20Setup/#setup-your-zune-in-xna-game-studio","text":"Plug in your Zune and make sure that the Zune Software is completely closed. Open XNA Game Studio Device Center which is located at C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\XNA\\Device Center Click Add Device , then Zune Select your Zune and continue through the remaining steps","title":"Setup your Zune in XNA Game Studio"},{"location":"OpenZDK%20Setup/#install-openzdk","text":"Close all instances of Visual Studio Install the OpenZDK ( openzdk-hd-4.5-20100414.msi ), can be found in the Quick Start Kit Select Custom installation type Set Documentation to Entire feature will be unavailable - The docs are only available if you have Visual Studio 2005 installed, and don't provide any OpenZDK specific information anyways Continue through the remaining steps","title":"Install OpenZDK"},{"location":"OpenZDK%20Setup/#install-the-platform-support-pack-for-opengl","text":"Install Standard SDK for Windows CE 5.0 ( STANDARD_SDK.msi ): The Nvidia installer needs this to finish installing Install NVIDIA Tegra 250 Platform Support Pack ( ce6_tegra_250_5265393.msi ): This contains all the library needed to use the NVIDIA hardware","title":"Install the Platform Support Pack (for OpenGL)"},{"location":"OpenZDK%20Setup/#setting-up-visual-studio-for-development","text":"Updating the include path In Visual Studio select Options > Tools > Projects and Solutions > VC++ Directories Select OpenZDK (ARMV4I) from the Platform dropdown Select Include files from the Show directories for dropdown Click the New line button Enter $(NV_WINCE_T2_PLAT)\\include and press enter Updating the library path Select Library files from the Show directories for dropdown Click the New line button Enter $(NV_WINCE_T2_PLAT)\\lib\\release and press enter That's it! Have fun developing :) Check out the \ud83d\uddfa\ufe0f Official Documentation or OpenZDK Reference for more information about the available APIs. To activate VS 2008 look here .","title":"Setting up Visual Studio for development"},{"location":"OpenZDK%20Setup/#references","text":"Reddit - Finally got XNA 3.1 studio running ZuneDevWiki - Installing prerequisites ZuneDevWiki - Preparing the Zune development environment \ud83d\uddfa\ufe0f OpenZDK","title":"References"},{"location":"Partitions%20and%20Filesystems/","text":"Partitions and Filesystems \u00b6 As the Zune is built on top of the NVIDIA Tegra APX 2600 platform it might use something similar to the default partition layout. Partition Layout from the Registry \u00b6 HKEY_LOCAL_MACHINE\\System\\StorageManager\\PartitionTable shows the partition layout of the Zune. \"01\"=\"FATFS\" \"04\"=\"FATFS\" \"06\"=\"FATFS\" \"07\"=\"MSIFS\" \"0B\"=\"FATFS\" \"0C\"=\"FATFS\" \"0E\"=\"FATFS\" \"0F\"=\"FATFS\" \"20\"=\"BOOT\" \"21\"=\"ZBINFS\" \"22\"=\"RAWFS\" \"23\"=\"RAWFS\" \"25\"=\"IMGFS\" \"26\"=\"BINARY\" Default Partition Layout from NVIDIA \u00b6 C:\\Program Files (x86)\\NVIDIA Corporation\\ce6_tegra_250_5265393\\os\\wince600_nand.cfg [device] type=nand instance=0 [partition] name=BCT id=2 type=boot_config_table allocation_policy=sequential filesystem_type=basic size=3145728 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 [partition] name=PT id=3 type=partition_table allocation_policy=sequential filesystem_type=basic size=4096 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 [partition] name=EBT id=4 type=bootloader allocation_policy=sequential filesystem_type=basic size=4194304 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 filename=EBOOT.NB0 [partition] name=BMP id=5 type=data allocation_policy=sequential filesystem_type=basic size=5260 file_system_attribute=0 filename=nvlogo_64x39_rgb565_wheader.raw allocation_attribute=8 percent_reserved=0 [partition] name=CE6 id=7 type=data allocation_policy=sequential filesystem_type=basic size=157286400 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=3 filename=NK.NB0 [partition] name=ARG id=8 type=data allocation_policy=sequential filesystem_type=basic size=2048 file_system_attribute=0 allocation_attribute=8 percent_reserved=5 start_location=0 [partition] name=DRM id=9 type=data allocation_policy=sequential filesystem_type=basic size=102400 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=300 filename=nvstorage.dat # update information partition [partition] name=UIP id=11 type=data allocation_policy=sequential filesystem_type=basic size=2048 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=10 # update staging partition [partition] name=USP id=12 type=data allocation_policy=sequential filesystem_type=basic size=167673856 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=5 [partition] name=USR id=13 type=data allocation_policy=sequential filesystem_type=basic size=0xFFFFFFFFFFFFFFFF file_system_attribute=0 partition_attribute=0 allocation_attribute=0 percent_reserved=5 Filesystems \u00b6 ZCSTFS \u00b6 Zune Content File System DLL: zcstfs.dll This is the Filesystem for the XNA Storage containers stored as ZCP Files . ZBINFS \u00b6 Zune Binary File System DLL: zbinfs.dll FATFS \u00b6 FAT File System DLL: zexfat.dll EXFAT \u00b6 DLL: zexfat.dll exFAT File System MSIFS \u00b6 MSIFS uses the EXFAT format. ObjectStore \u00b6 DLL: filesys.dll \ud83d\uddfa\ufe0f Windows CE 6.0","title":"Partitions and Filesystems"},{"location":"Partitions%20and%20Filesystems/#partitions-and-filesystems","text":"As the Zune is built on top of the NVIDIA Tegra APX 2600 platform it might use something similar to the default partition layout.","title":"Partitions and Filesystems"},{"location":"Partitions%20and%20Filesystems/#partition-layout-from-the-registry","text":"HKEY_LOCAL_MACHINE\\System\\StorageManager\\PartitionTable shows the partition layout of the Zune. \"01\"=\"FATFS\" \"04\"=\"FATFS\" \"06\"=\"FATFS\" \"07\"=\"MSIFS\" \"0B\"=\"FATFS\" \"0C\"=\"FATFS\" \"0E\"=\"FATFS\" \"0F\"=\"FATFS\" \"20\"=\"BOOT\" \"21\"=\"ZBINFS\" \"22\"=\"RAWFS\" \"23\"=\"RAWFS\" \"25\"=\"IMGFS\" \"26\"=\"BINARY\"","title":"Partition Layout from the Registry"},{"location":"Partitions%20and%20Filesystems/#default-partition-layout-from-nvidia","text":"C:\\Program Files (x86)\\NVIDIA Corporation\\ce6_tegra_250_5265393\\os\\wince600_nand.cfg [device] type=nand instance=0 [partition] name=BCT id=2 type=boot_config_table allocation_policy=sequential filesystem_type=basic size=3145728 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 [partition] name=PT id=3 type=partition_table allocation_policy=sequential filesystem_type=basic size=4096 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 [partition] name=EBT id=4 type=bootloader allocation_policy=sequential filesystem_type=basic size=4194304 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=0 filename=EBOOT.NB0 [partition] name=BMP id=5 type=data allocation_policy=sequential filesystem_type=basic size=5260 file_system_attribute=0 filename=nvlogo_64x39_rgb565_wheader.raw allocation_attribute=8 percent_reserved=0 [partition] name=CE6 id=7 type=data allocation_policy=sequential filesystem_type=basic size=157286400 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=3 filename=NK.NB0 [partition] name=ARG id=8 type=data allocation_policy=sequential filesystem_type=basic size=2048 file_system_attribute=0 allocation_attribute=8 percent_reserved=5 start_location=0 [partition] name=DRM id=9 type=data allocation_policy=sequential filesystem_type=basic size=102400 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=300 filename=nvstorage.dat # update information partition [partition] name=UIP id=11 type=data allocation_policy=sequential filesystem_type=basic size=2048 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=10 # update staging partition [partition] name=USP id=12 type=data allocation_policy=sequential filesystem_type=basic size=167673856 file_system_attribute=0 partition_attribute=0 allocation_attribute=8 percent_reserved=5 [partition] name=USR id=13 type=data allocation_policy=sequential filesystem_type=basic size=0xFFFFFFFFFFFFFFFF file_system_attribute=0 partition_attribute=0 allocation_attribute=0 percent_reserved=5","title":"Default Partition Layout from NVIDIA"},{"location":"Partitions%20and%20Filesystems/#filesystems","text":"","title":"Filesystems"},{"location":"Partitions%20and%20Filesystems/#zcstfs","text":"Zune Content File System DLL: zcstfs.dll This is the Filesystem for the XNA Storage containers stored as ZCP Files .","title":"ZCSTFS"},{"location":"Partitions%20and%20Filesystems/#zbinfs","text":"Zune Binary File System DLL: zbinfs.dll","title":"ZBINFS"},{"location":"Partitions%20and%20Filesystems/#fatfs","text":"FAT File System DLL: zexfat.dll","title":"FATFS"},{"location":"Partitions%20and%20Filesystems/#exfat","text":"DLL: zexfat.dll exFAT File System","title":"EXFAT"},{"location":"Partitions%20and%20Filesystems/#msifs","text":"MSIFS uses the EXFAT format.","title":"MSIFS"},{"location":"Partitions%20and%20Filesystems/#objectstore","text":"DLL: filesys.dll \ud83d\uddfa\ufe0f Windows CE 6.0","title":"ObjectStore"},{"location":"Paths/","text":"Paths \u00b6 Paths containing useful data / executables. XNA Device Center: C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\XNA\\Device Center OpenZDK libs/includes: C:\\Program Files (x86)\\Windows CE Tools\\wce600\\OpenZDK Remote Tools: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Microsoft Visual Studio 2008\\Visual Studio Remote Tools XNA Assemblies (Desktop): C:\\Windows\\assembly\\GAC_MSIL\\Microsoft.Xna.GameStudio.DeviceManagement\\3.1.0.0__6d5c3888ef60e27d","title":"Paths"},{"location":"Paths/#paths","text":"Paths containing useful data / executables. XNA Device Center: C:\\Program Files (x86)\\Common Files\\Microsoft Shared\\XNA\\Device Center OpenZDK libs/includes: C:\\Program Files (x86)\\Windows CE Tools\\wce600\\OpenZDK Remote Tools: C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Microsoft Visual Studio 2008\\Visual Studio Remote Tools XNA Assemblies (Desktop): C:\\Windows\\assembly\\GAC_MSIL\\Microsoft.Xna.GameStudio.DeviceManagement\\3.1.0.0__6d5c3888ef60e27d","title":"Paths"},{"location":"Workbench/","text":"Workbench \u00b6 A place for me to quickly write down found information, will be sorted later. Strings contained in various binaries \u00b6 zam_srv.dll \u00b6 This service is responsible for the XNA connection. Services\\ZAM\\PowerManagement ZamPowerMgr Interesting looking guids: {24327589-6EEA-4fb7-B57E-3C8373CC1C46}\\DSP1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\ACL1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\CPU1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\ZTP1: Probably win32 events: ZAM/Started ZAM/AppExitEvent Zune/CpuChangeEvent ZAM/XnaDbgConnectionClose ZAM/XnaDbgConnectionPending ZAM/XnaDbgHandlerActive ZAM/MESSAGEQUEUE Some paths: Update\\nk.bin Update\\ext.bin Update\\zboot.bin Update\\recovery.bin Update\\mtece.bin Microsoft.Xna.RemoteServices Service IDs \u00b6 These are services are used by XNA to deploy your app (for eg when making an app in Visual Studio). These are also used by DeployKit. {7F7534A1-293D-495E-88DA-F1EA984EF075} Profiler {92C8EE24-92DF-4cb5-99C2-B4C7068528E9} Console {7ABBE0D5-B437-42ca-B57B-CEED61680E4F} Debugger {2B80CE0A-7119-413e-BA6F-E451AC9382AF} Performance monitor {754BD393-556F-4a33-8541-BC009FFE979E} Sampling profiler {D8F4AE7C-581B-4898-97C0-F08EBC001D20} Error popup suppression {BC66BB72-DE63-4b31-956E-B3878CE9F5D2} Test target {D0F348D2-9667-4ef2-B078-BF94077177FD} Trace XnaChannelBroker Deployment/launch channel broker XnaScreenshotService Screenshot acquisition XNACHANx Brokered channel (x = returned channel ID) Bootloader \u00b6 BCT Overview Tegra Boot Flow Tegra Tools \u00b6 GitHub - NVIDIA/cbootimage: Tegra BCT and bootable flash image generator/compiler GitHub - NVIDIA/nvstrings: Legacy repository for nvstrings GitHub - NVIDIA/tegra-pinmux-scripts: Scripts to auto-generate pin mux drivers and board configuration tables for Tegra SoCs and boards GitHub - NVIDIA/cbootimage-configs: Configuration files for use with cbootimage GitHub - NVIDIA/tegrarcm: Tegra ReCovery Mode tool; communicates with Tegra's boot ROM to download code over USB GitHub - NVIDIA/tegra-uboot-flasher-scripts: Tegra U-Boot Flasher project: scripts GitHub - NVIDIA/tegra-rootfs-scripts: Tegra scripts GitHub - NVIDIA/tegra-nouveau-rootfs: Manifests to create an Arch Linux ARM rootfs augmented with Nouveau and the OSS graphics stack for NVIDIA's Jetson TK1/TX1 boards GitHub - NVIDIA/tegra-uboot-scripts: Generate boot.scr for U-Boot on Tegra GitHub - NVIDIA/tegra-uboot-flasher-manifests: Tegra U-Boot Flasher project: manifests (see https://github.com/NVIDIA/tegra-uboot-flasher-scripts)","title":"Workbench"},{"location":"Workbench/#workbench","text":"A place for me to quickly write down found information, will be sorted later.","title":"Workbench"},{"location":"Workbench/#strings-contained-in-various-binaries","text":"","title":"Strings contained in various binaries"},{"location":"Workbench/#zam_srvdll","text":"This service is responsible for the XNA connection. Services\\ZAM\\PowerManagement ZamPowerMgr Interesting looking guids: {24327589-6EEA-4fb7-B57E-3C8373CC1C46}\\DSP1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\ACL1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\CPU1: {A32942B7-920C-486b-B0E6-92A702A99B35}\\ZTP1: Probably win32 events: ZAM/Started ZAM/AppExitEvent Zune/CpuChangeEvent ZAM/XnaDbgConnectionClose ZAM/XnaDbgConnectionPending ZAM/XnaDbgHandlerActive ZAM/MESSAGEQUEUE Some paths: Update\\nk.bin Update\\ext.bin Update\\zboot.bin Update\\recovery.bin Update\\mtece.bin","title":"zam_srv.dll"},{"location":"Workbench/#microsoftxnaremoteservices-service-ids","text":"These are services are used by XNA to deploy your app (for eg when making an app in Visual Studio). These are also used by DeployKit. {7F7534A1-293D-495E-88DA-F1EA984EF075} Profiler {92C8EE24-92DF-4cb5-99C2-B4C7068528E9} Console {7ABBE0D5-B437-42ca-B57B-CEED61680E4F} Debugger {2B80CE0A-7119-413e-BA6F-E451AC9382AF} Performance monitor {754BD393-556F-4a33-8541-BC009FFE979E} Sampling profiler {D8F4AE7C-581B-4898-97C0-F08EBC001D20} Error popup suppression {BC66BB72-DE63-4b31-956E-B3878CE9F5D2} Test target {D0F348D2-9667-4ef2-B078-BF94077177FD} Trace XnaChannelBroker Deployment/launch channel broker XnaScreenshotService Screenshot acquisition XNACHANx Brokered channel (x = returned channel ID)","title":"Microsoft.Xna.RemoteServices Service IDs"},{"location":"Workbench/#bootloader","text":"BCT Overview Tegra Boot Flow","title":"Bootloader"},{"location":"Workbench/#tegra-tools","text":"GitHub - NVIDIA/cbootimage: Tegra BCT and bootable flash image generator/compiler GitHub - NVIDIA/nvstrings: Legacy repository for nvstrings GitHub - NVIDIA/tegra-pinmux-scripts: Scripts to auto-generate pin mux drivers and board configuration tables for Tegra SoCs and boards GitHub - NVIDIA/cbootimage-configs: Configuration files for use with cbootimage GitHub - NVIDIA/tegrarcm: Tegra ReCovery Mode tool; communicates with Tegra's boot ROM to download code over USB GitHub - NVIDIA/tegra-uboot-flasher-scripts: Tegra U-Boot Flasher project: scripts GitHub - NVIDIA/tegra-rootfs-scripts: Tegra scripts GitHub - NVIDIA/tegra-nouveau-rootfs: Manifests to create an Arch Linux ARM rootfs augmented with Nouveau and the OSS graphics stack for NVIDIA's Jetson TK1/TX1 boards GitHub - NVIDIA/tegra-uboot-scripts: Generate boot.scr for U-Boot on Tegra GitHub - NVIDIA/tegra-uboot-flasher-manifests: Tegra U-Boot Flasher project: manifests (see https://github.com/NVIDIA/tegra-uboot-flasher-scripts)","title":"Tegra Tools"},{"location":"XNA%20Apps/","text":"XNA Apps \u00b6 Before the OpenZDK was released it was only possible to build apps using the XNA Framework. These apps use the .NET Compact Framework and the XNA Framework to run. The .NET Compact Framework is a tiny subset of the .NET framework and doesn't even know about the OS it is running on. Files \u00b6 XNA Apps run in their own ZCP container, and can only access data from their own container. This access restriction is only imposed by the XNA Framework/.NET Framework, as \ud83d\uddfa\ufe0f OpenZDK apps have access to more files. Although they still can't access any system files. By default two containers are mounted: gamert : Hosts all the XNA Runtime libraries gametitle : Hosts the content of XNA application The path where the content is accessible seems to be: \\gametitle\\584E07D1\\Content . XNA Apps can also open other Storage Containers, which are usually used for save files. These containers are accessible through the GamerServices . Using these you can \"show\" the user a device selector, where in theory they could select the drive they would like to store their save files to. On the Zune this does nothing, but is still needed in order to gain access to such a storage container. The XNA Framework was mainly developed for the XBOX. This is why that weird step is needed. Code Sample: IAsyncResult async = Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(null, null); var storage = Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector(async); Debug.WriteLine(\"Is connected: \" + storage.IsConnected); var container = storage.OpenContainer(\"ZuneCraft\"); Debug.WriteLine(\"Container Path: \" + container.Path); The file path can be composited using container.Path + PATH_TO_YOUR_FILE . \ud83d\uddfa\ufe0f XNA Framework","title":"XNA Apps"},{"location":"XNA%20Apps/#xna-apps","text":"Before the OpenZDK was released it was only possible to build apps using the XNA Framework. These apps use the .NET Compact Framework and the XNA Framework to run. The .NET Compact Framework is a tiny subset of the .NET framework and doesn't even know about the OS it is running on.","title":"XNA Apps"},{"location":"XNA%20Apps/#files","text":"XNA Apps run in their own ZCP container, and can only access data from their own container. This access restriction is only imposed by the XNA Framework/.NET Framework, as \ud83d\uddfa\ufe0f OpenZDK apps have access to more files. Although they still can't access any system files. By default two containers are mounted: gamert : Hosts all the XNA Runtime libraries gametitle : Hosts the content of XNA application The path where the content is accessible seems to be: \\gametitle\\584E07D1\\Content . XNA Apps can also open other Storage Containers, which are usually used for save files. These containers are accessible through the GamerServices . Using these you can \"show\" the user a device selector, where in theory they could select the drive they would like to store their save files to. On the Zune this does nothing, but is still needed in order to gain access to such a storage container. The XNA Framework was mainly developed for the XBOX. This is why that weird step is needed. Code Sample: IAsyncResult async = Microsoft.Xna.Framework.GamerServices.Guide.BeginShowStorageDeviceSelector(null, null); var storage = Microsoft.Xna.Framework.GamerServices.Guide.EndShowStorageDeviceSelector(async); Debug.WriteLine(\"Is connected: \" + storage.IsConnected); var container = storage.OpenContainer(\"ZuneCraft\"); Debug.WriteLine(\"Container Path: \" + container.Path); The file path can be composited using container.Path + PATH_TO_YOUR_FILE . \ud83d\uddfa\ufe0f XNA Framework","title":"Files"},{"location":"ZCP%20Files/","text":"ZCP Files \u00b6 NOTE: This note is still very rough, it just contains some copied info from the xda-froum. These files are XNA Storage Containers. They are essentially a mini filesystem in a single file, similar to a VHD for example. They are mounted by the Zune at runtime when launching an XNA Application . Each application is packaged into its own ZCP File. The filesystem used is called Zune Content File System (zcstfs.dll) and is actually registered by the StorageManger in the Registry at HKEY_LOCAL_MACHINE\\System\\StorageManager\\ZCSTFS . There are 3 different types of Storage Containers used by XNA: - Game Containers: Mounted automatically at /gametitle/ and stores all the deployed app content. - Runtime Containers: Mounted automatically at /gamert/ and stores all the XNA Runtime libraries. - Storage Containers: Has to be manually loaded and will be mounted at /xnaa/ . Usually used for save files. Deployment \u00b6 When deploying an application to the Zune, it will receive all the files from the computer and then package them into a new zcp container. It is mounted during deploy and launch of the title. DeployKit uses the same XNA apis as Visual Studio to deploy apps. \ud83d\uddfa\ufe0f File Types , \ud83d\uddfa\ufe0f XNA Framework","title":"ZCP Files"},{"location":"ZCP%20Files/#zcp-files","text":"NOTE: This note is still very rough, it just contains some copied info from the xda-froum. These files are XNA Storage Containers. They are essentially a mini filesystem in a single file, similar to a VHD for example. They are mounted by the Zune at runtime when launching an XNA Application . Each application is packaged into its own ZCP File. The filesystem used is called Zune Content File System (zcstfs.dll) and is actually registered by the StorageManger in the Registry at HKEY_LOCAL_MACHINE\\System\\StorageManager\\ZCSTFS . There are 3 different types of Storage Containers used by XNA: - Game Containers: Mounted automatically at /gametitle/ and stores all the deployed app content. - Runtime Containers: Mounted automatically at /gamert/ and stores all the XNA Runtime libraries. - Storage Containers: Has to be manually loaded and will be mounted at /xnaa/ . Usually used for save files.","title":"ZCP Files"},{"location":"ZCP%20Files/#deployment","text":"When deploying an application to the Zune, it will receive all the files from the computer and then package them into a new zcp container. It is mounted during deploy and launch of the title. DeployKit uses the same XNA apis as Visual Studio to deploy apps. \ud83d\uddfa\ufe0f File Types , \ud83d\uddfa\ufe0f XNA Framework","title":"Deployment"},{"location":"ZDKSystem_ShowSplashScreen/","text":"ZDKSystem_ShowSplashScreen(int flag) \u00b6 If flag is set to 1, Zune will try to initialize the Massive AdClientLite (zmassive.dll). This was probably once used to display ads before starting a Zune Marketplace App. However the servers are long gone so nothing happens.","title":"ZDKSystem_ShowSplashScreen(int flag)"},{"location":"ZDKSystem_ShowSplashScreen/#zdksystem_showsplashscreenint-flag","text":"If flag is set to 1, Zune will try to initialize the Massive AdClientLite (zmassive.dll). This was probably once used to display ads before starting a Zune Marketplace App. However the servers are long gone so nothing happens.","title":"ZDKSystem_ShowSplashScreen(int flag)"},{"location":"Zune%20HD/","text":"Zune HD \u00b6 The Zune HD was release on September 15, 2009 and was the last Zune to be released by Microsoft. width: 480 height: 272 Zune only has 128MB ram :( References \u00b6 Wikipedia Zune HD","title":"Zune HD"},{"location":"Zune%20HD/#zune-hd","text":"The Zune HD was release on September 15, 2009 and was the last Zune to be released by Microsoft. width: 480 height: 272 Zune only has 128MB ram :(","title":"Zune HD"},{"location":"Zune%20HD/#references","text":"Wikipedia Zune HD","title":"References"},{"location":"%F0%9F%97%BA%EF%B8%8F%20File%20Types/","text":"\ud83d\uddfa\ufe0f File Types \u00b6 The Zune uses many different file types from binary files for roms or files to package applications. Some of them are explained here. Types \u00b6 Firmware Files ZCP Files Gem Files","title":"\ud83d\uddfa\ufe0f File Types"},{"location":"%F0%9F%97%BA%EF%B8%8F%20File%20Types/#file-types","text":"The Zune uses many different file types from binary files for roms or files to package applications. Some of them are explained here.","title":"\ud83d\uddfa\ufe0f File Types"},{"location":"%F0%9F%97%BA%EF%B8%8F%20File%20Types/#types","text":"Firmware Files ZCP Files Gem Files","title":"Types"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Official%20Documentation/","text":"\ud83d\uddfa\ufe0f Official Documentations \u00b6 Here are some of the official docs I found about the Zune HD and its hardware. Documentation \u00b6 ce6_tegra_250_pack_5265393.pdf XNA_Game_Studio_3.1.pdf tegra_250_hw_setup.pdf tegra_gles2_development.pdf tegra_perfhud_quickstart_1_1.pdf win_es2emu_pack_v100.pdf tegra_gles2_performance.pdf CE 6.0 Documentation \u00b6 CE 6.0 Technical Articles CE 6.0 Docs CE 6.0 Kernel Docs CE 6.0 Kernel Reference CE 6.0 Core OS Reference CE 6.0 File Systems and Storage Management","title":"\ud83d\uddfa\ufe0f Official Documentations"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Official%20Documentation/#official-documentations","text":"Here are some of the official docs I found about the Zune HD and its hardware.","title":"\ud83d\uddfa\ufe0f Official Documentations"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Official%20Documentation/#documentation","text":"ce6_tegra_250_pack_5265393.pdf XNA_Game_Studio_3.1.pdf tegra_250_hw_setup.pdf tegra_gles2_development.pdf tegra_perfhud_quickstart_1_1.pdf win_es2emu_pack_v100.pdf tegra_gles2_performance.pdf","title":"Documentation"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Official%20Documentation/#ce-60-documentation","text":"CE 6.0 Technical Articles CE 6.0 Docs CE 6.0 Kernel Docs CE 6.0 Kernel Reference CE 6.0 Core OS Reference CE 6.0 File Systems and Storage Management","title":"CE 6.0 Documentation"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenGL%20ES/","text":"\ud83d\uddfa\ufe0f OpenGL ES \u00b6 The Zune HD supports the OpenGL ES 2.0 standard, which is basically OpenGL 2.0 but with a programmable render pipeline. Getting Started \u00b6 All you have to do in order to initialize OpenGL in your application is to include zdkgl.h and call ZDKGL_Initialize() on startup. Make sure to call ZDKGL_Cleanup() before exiting. Surround your render code with ZDKGL_BeginDraw() and ZDKGL_EndDraw() and you are good to go. Extensions \u00b6 The Zune HD also supports the following extensions. GL_OES_rgb8_rgba8 , GL_OES_fbo_render_mipmap , GL_NV_depth_nonlinear , GL_NV_draw_path , GL_OES_EGL_image , GL_OES_vertex_half_float , GL_NV_framebuffer_vertex_attrib_array , GL_NV_coverage_sample , GL_OES_mapbuffer , GL_ARB_draw_buffers , GL_ARB_half_float_pixel , GL_EXT_Cg_shader , GL_EXT_packed_float , GL_OES_texture_half_float , GL_OES_texture_float , GL_EXT_texture_array , GL_OES_compressed_ETC1_RGB8_texture , GL_EXT_texture_compression_latc , GL_EXT_texture_compression_s3tc , GL_EXT_texture_filter_anisotropic GL_NV_get_tex_image , GL_NV_read_buffer , GL_NV_shader_framebuffer_fetch , GL_ARB_texture_rectangle , GL_NV_fbo_color_attachments , GL_EXT_bgra maybe supported, have to check: GL_AMD_performance_monitor, GL_EXT_multi_draw_arrays","title":"\ud83d\uddfa\ufe0f OpenGL ES"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenGL%20ES/#opengl-es","text":"The Zune HD supports the OpenGL ES 2.0 standard, which is basically OpenGL 2.0 but with a programmable render pipeline.","title":"\ud83d\uddfa\ufe0f OpenGL ES"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenGL%20ES/#getting-started","text":"All you have to do in order to initialize OpenGL in your application is to include zdkgl.h and call ZDKGL_Initialize() on startup. Make sure to call ZDKGL_Cleanup() before exiting. Surround your render code with ZDKGL_BeginDraw() and ZDKGL_EndDraw() and you are good to go.","title":"Getting Started"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenGL%20ES/#extensions","text":"The Zune HD also supports the following extensions. GL_OES_rgb8_rgba8 , GL_OES_fbo_render_mipmap , GL_NV_depth_nonlinear , GL_NV_draw_path , GL_OES_EGL_image , GL_OES_vertex_half_float , GL_NV_framebuffer_vertex_attrib_array , GL_NV_coverage_sample , GL_OES_mapbuffer , GL_ARB_draw_buffers , GL_ARB_half_float_pixel , GL_EXT_Cg_shader , GL_EXT_packed_float , GL_OES_texture_half_float , GL_OES_texture_float , GL_EXT_texture_array , GL_OES_compressed_ETC1_RGB8_texture , GL_EXT_texture_compression_latc , GL_EXT_texture_compression_s3tc , GL_EXT_texture_filter_anisotropic GL_NV_get_tex_image , GL_NV_read_buffer , GL_NV_shader_framebuffer_fetch , GL_ARB_texture_rectangle , GL_NV_fbo_color_attachments , GL_EXT_bgra maybe supported, have to check: GL_AMD_performance_monitor, GL_EXT_multi_draw_arrays","title":"Extensions"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenZDK/","text":"\ud83d\uddfa\ufe0f OpenZDK \u00b6 The OpenZDK is a SDK for writing applications for the Zune and was developed by people going by the usernames itsnotabigtruck , Netrix and Nurta . In contrary to the XNA Framework, the OpenZDK allows far more control over the Zune's hardware, like access to \ud83d\uddfa\ufe0f OpenGL ES and other useful libraries. The OpenZDK works by using a bug in the Shell which allows it to execute arbitrary code outside of the very limited .NET Compact Framework. This code still runs in user mode, and not with elevated privileges. The original authors have created header and library files from Zune specific DLLs like zdksystem.dll by reverse engineering their function signatures, in order to get access to the Zune's API. Most of the documentation can be access on zunedevwiki.org (use webarchive). I will try to add as much information as possible over time, as the webarchive is painfully slow. Topics \u00b6 OpenZDK Setup OpenZDK Reference Activating Visual Studio 2008 Profressional Apps \u00b6 Liberate References \u00b6 Reddit - Finally got XNA 3.1 studio running Zune Dev Wiki (through web.archive.org) Reddit - Play Gameboy games on your Zune HD","title":"\ud83d\uddfa\ufe0f OpenZDK"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenZDK/#openzdk","text":"The OpenZDK is a SDK for writing applications for the Zune and was developed by people going by the usernames itsnotabigtruck , Netrix and Nurta . In contrary to the XNA Framework, the OpenZDK allows far more control over the Zune's hardware, like access to \ud83d\uddfa\ufe0f OpenGL ES and other useful libraries. The OpenZDK works by using a bug in the Shell which allows it to execute arbitrary code outside of the very limited .NET Compact Framework. This code still runs in user mode, and not with elevated privileges. The original authors have created header and library files from Zune specific DLLs like zdksystem.dll by reverse engineering their function signatures, in order to get access to the Zune's API. Most of the documentation can be access on zunedevwiki.org (use webarchive). I will try to add as much information as possible over time, as the webarchive is painfully slow.","title":"\ud83d\uddfa\ufe0f OpenZDK"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenZDK/#topics","text":"OpenZDK Setup OpenZDK Reference Activating Visual Studio 2008 Profressional","title":"Topics"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenZDK/#apps","text":"Liberate","title":"Apps"},{"location":"%F0%9F%97%BA%EF%B8%8F%20OpenZDK/#references","text":"Reddit - Finally got XNA 3.1 studio running Zune Dev Wiki (through web.archive.org) Reddit - Play Gameboy games on your Zune HD","title":"References"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Windows%20CE%206.0/","text":"Windows CE 6.0 \u00b6 The Zune HD runs on Windows CE 6.0. Topics \u00b6 \ud83d\uddfa\ufe0f Official Documentation#CE 6 0 Documentation CE 6.0 Architecture Device Manager Partitions and Filesystems","title":"Windows CE 6.0"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Windows%20CE%206.0/#windows-ce-60","text":"The Zune HD runs on Windows CE 6.0.","title":"Windows CE 6.0"},{"location":"%F0%9F%97%BA%EF%B8%8F%20Windows%20CE%206.0/#topics","text":"\ud83d\uddfa\ufe0f Official Documentation#CE 6 0 Documentation CE 6.0 Architecture Device Manager Partitions and Filesystems","title":"Topics"},{"location":"%F0%9F%97%BA%EF%B8%8F%20XNA%20Framework/","text":"\ud83d\uddfa\ufe0f XNA Framework \u00b6 The Zune uses the XNA 3.1 Framework. Topics \u00b6 XNA Apps ZCP Files","title":"\ud83d\uddfa\ufe0f XNA Framework"},{"location":"%F0%9F%97%BA%EF%B8%8F%20XNA%20Framework/#xna-framework","text":"The Zune uses the XNA 3.1 Framework.","title":"\ud83d\uddfa\ufe0f XNA Framework"},{"location":"%F0%9F%97%BA%EF%B8%8F%20XNA%20Framework/#topics","text":"XNA Apps ZCP Files","title":"Topics"},{"location":"OpenZDK%20Headers/zdkaudio.h/","text":"zdkaudio.h \u00b6 /* Initialization */ HRESULT WINAPI ZDKAudio_Initialize(); HRESULT WINAPI ZDKAudio_Shutdown(); /* Control Voices */ HRESULT WINAPI ZDKAudio_CreateVoice(const WAVEFORMATEX *format, DWORD formatSize, HVOICE *handle); HRESULT WINAPI ZDKAudio_DestroyVoice(HVOICE handle); /* Playback Control */ HRESULT WINAPI ZDKAudio_GetPan(HVOICE handle, float *pan); HRESULT WINAPI ZDKAudio_GetPitch(HVOICE handle, float *pitch); HRESULT WINAPI ZDKAudio_GetVoiceState(HVOICE handle, ZDK_VOICE_STATE *state); HRESULT WINAPI ZDKAudio_GetVolume(HVOICE handle, float *volume); HRESULT WINAPI ZDKAudio_Pause(HVOICE handle); HRESULT WINAPI ZDKAudio_Play(HVOICE handle); HRESULT WINAPI ZDKAudio_SetMasterVolume(float volume); HRESULT WINAPI ZDKAudio_SetPan(HVOICE handle, float pan); HRESULT WINAPI ZDKAudio_SetPitch(HVOICE handle, float pitch); HRESULT WINAPI ZDKAudio_SetVolume(HVOICE handle, float volume); HRESULT WINAPI ZDKAudio_Stop(HVOICE handle, BOOL immediate); /* Send Audio Data*/ HRESULT WINAPI ZDKAudio_SubmitPacket(HVOICE handle, const BYTE *data, DWORD dataSize, int loopStart, int loopLength, int loopCount); /* Types */ typedef enum { VOICE_STATE_PLAYING = 0x1, VOICE_STATE_STOPPING = 0x2, VOICE_STATE_STOPPED = 0x4, VOICE_STATE_PAUSED = 0x8 } ZDK_VOICE_STATE; OpenZDK Reference","title":"zdkaudio.h"},{"location":"OpenZDK%20Headers/zdkaudio.h/#zdkaudioh","text":"/* Initialization */ HRESULT WINAPI ZDKAudio_Initialize(); HRESULT WINAPI ZDKAudio_Shutdown(); /* Control Voices */ HRESULT WINAPI ZDKAudio_CreateVoice(const WAVEFORMATEX *format, DWORD formatSize, HVOICE *handle); HRESULT WINAPI ZDKAudio_DestroyVoice(HVOICE handle); /* Playback Control */ HRESULT WINAPI ZDKAudio_GetPan(HVOICE handle, float *pan); HRESULT WINAPI ZDKAudio_GetPitch(HVOICE handle, float *pitch); HRESULT WINAPI ZDKAudio_GetVoiceState(HVOICE handle, ZDK_VOICE_STATE *state); HRESULT WINAPI ZDKAudio_GetVolume(HVOICE handle, float *volume); HRESULT WINAPI ZDKAudio_Pause(HVOICE handle); HRESULT WINAPI ZDKAudio_Play(HVOICE handle); HRESULT WINAPI ZDKAudio_SetMasterVolume(float volume); HRESULT WINAPI ZDKAudio_SetPan(HVOICE handle, float pan); HRESULT WINAPI ZDKAudio_SetPitch(HVOICE handle, float pitch); HRESULT WINAPI ZDKAudio_SetVolume(HVOICE handle, float volume); HRESULT WINAPI ZDKAudio_Stop(HVOICE handle, BOOL immediate); /* Send Audio Data*/ HRESULT WINAPI ZDKAudio_SubmitPacket(HVOICE handle, const BYTE *data, DWORD dataSize, int loopStart, int loopLength, int loopCount); /* Types */ typedef enum { VOICE_STATE_PLAYING = 0x1, VOICE_STATE_STOPPING = 0x2, VOICE_STATE_STOPPED = 0x4, VOICE_STATE_PAUSED = 0x8 } ZDK_VOICE_STATE; OpenZDK Reference","title":"zdkaudio.h"},{"location":"OpenZDK%20Headers/zdkcontent.h/","text":"zdkcontent.h \u00b6 /* Container Management */ HRESULT WINAPI ZDKContent_Create(ZDK_CONTAINER_INFO *info, int w, int x, int y, int z); HRESULT WINAPI ZDKContent_Mount(LPCWSTR mountPoint, ZDK_CONTAINER_INFO *info, BOOL flag); HRESULT WINAPI ZDKContent_Unmount(LPCWSTR mountPoint); HRESULT WINAPI ZDKContent_UnmountAll(); /* ZDKContent_Delete */ /* ZDKContent_Flush */ /* ZDKContent_SetMetaData */ /* ZDKContent_SetThumbnail */ /* ZDKContent_FindClose */ /* ZDKContent_FindFirst */ /* ZDKContent_FindNext */ /* Types */ typedef enum { CONTAINER_TYPE_RUNTIME = 0x1, CONTAINER_TYPE_APPLICATION = 0x2, CONTAINER_TYPE_STORAGE = 0x3 } ZDK_CONTAINER_TYPE; typedef struct { GUID UserGuid; GUID VirtualTitleId; ZDK_CONTAINER_TYPE ContainerType; wchar_t Name[40]; } ZDK_CONTAINER_INFO; OpenZDK Reference","title":"zdkcontent.h"},{"location":"OpenZDK%20Headers/zdkcontent.h/#zdkcontenth","text":"/* Container Management */ HRESULT WINAPI ZDKContent_Create(ZDK_CONTAINER_INFO *info, int w, int x, int y, int z); HRESULT WINAPI ZDKContent_Mount(LPCWSTR mountPoint, ZDK_CONTAINER_INFO *info, BOOL flag); HRESULT WINAPI ZDKContent_Unmount(LPCWSTR mountPoint); HRESULT WINAPI ZDKContent_UnmountAll(); /* ZDKContent_Delete */ /* ZDKContent_Flush */ /* ZDKContent_SetMetaData */ /* ZDKContent_SetThumbnail */ /* ZDKContent_FindClose */ /* ZDKContent_FindFirst */ /* ZDKContent_FindNext */ /* Types */ typedef enum { CONTAINER_TYPE_RUNTIME = 0x1, CONTAINER_TYPE_APPLICATION = 0x2, CONTAINER_TYPE_STORAGE = 0x3 } ZDK_CONTAINER_TYPE; typedef struct { GUID UserGuid; GUID VirtualTitleId; ZDK_CONTAINER_TYPE ContainerType; wchar_t Name[40]; } ZDK_CONTAINER_INFO; OpenZDK Reference","title":"zdkcontent.h"},{"location":"OpenZDK%20Headers/zdkdisplay.h/","text":"zdkdisplay.h \u00b6 /* 2D initialization */ HRESULT WINAPI ZDKDisplay_Initialize(); HRESULT WINAPI ZDKDisplay_Cleanup(); /* System information */ HRESULT WINAPI ZDKDisplay_GetInfo(DWORD *screenWidth, DWORD *screenHeight); /* Texture management */ HRESULT WINAPI ZDKDisplay_CreateTexture(DWORD width, DWORD height, HTEXTURE *texture); HRESULT WINAPI ZDKDisplay_FreeTexture(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_GetTextureData(HTEXTURE texture, ZDK_RECT *rect, void *buffer, DWORD dataSize); HRESULT WINAPI ZDKDisplay_GetTextureInfo(HTEXTURE texture, DWORD *width, DWORD *height); HRESULT WINAPI ZDKDisplay_SetTextureData(HTEXTURE texture, ZDK_RECT *rect, void *buffer, DWORD dataSize); HRESULT WINAPI ZDKDisplay_TextureLockRect(HTEXTURE texture, ZDK_TEXTURE_LOCK_INFO *info, ZDK_RECT *rect, ZDK_TEXTURE_LOCK_FLAGS flags); HRESULT WINAPI ZDKDisplay_TextureUnlockRect(HTEXTURE texture); /* Rendering */ HRESULT WINAPI ZDKDisplay_BeginScene(); HRESULT WINAPI ZDKDisplay_Clear(DWORD color); HRESULT WINAPI ZDKDisplay_DrawSprites(ZDK_SPRITE *sprites, DWORD spriteCount); HRESULT WINAPI ZDKDisplay_EndScene(); HRESULT WINAPI ZDKDisplay_Present(); HRESULT WINAPI ZDKDisplay_ResolveBackBuffer(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetBlendMode(ZDK_BLEND_MODE blendMode); HRESULT WINAPI ZDKDisplay_SetClipRect(ZDK_RECT *rect); HRESULT WINAPI ZDKDisplay_SetRenderTarget(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetTexture(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetTransform(ZDK_MATRIX *matrix); /* ZDKDisplay_SetTextureFilter */ /* Types */ typedef float ZDK_MATRIX[4][4]; typedef struct { int Left; int Top; int Right; int Bottom; } ZDK_RECT; typedef enum { BLEND_MODE_NONE, BLEND_MODE_ALPHA_BLEND, BLEND_MODE_ADDITIVE } ZDK_BLEND_MODE; typedef struct { float X; float Y; float U; float V; } ZDK_VERTEXDATA; typedef struct { ZDK_VERTEXDATA Vertices[4]; DWORD Color; } ZDK_SPRITE; DECLARE_HANDLE(HTEXTURE); typedef enum { TEXTURE_LOCK_DEFAULT = 0x0, TEXTURE_LOCK_READONLY = 0x10, TEXTURE_LOCK_NOSYSLOCK = 0x800, /* questionable */ TEXTURE_LOCK_NOOVERWRITE = 0x1000, /* questionable */ TEXTURE_LOCK_DISCARD = 0x2000, TEXTURE_LOCK_NO_DIRTY_UPDATE = 0x8000 /* questionable */ } ZDK_TEXTURE_LOCK_FLAGS; typedef struct { int Pitch; DWORD *Buffer; } ZDK_TEXTURE_LOCK_INFO; OpenZDK Reference","title":"zdkdisplay.h"},{"location":"OpenZDK%20Headers/zdkdisplay.h/#zdkdisplayh","text":"/* 2D initialization */ HRESULT WINAPI ZDKDisplay_Initialize(); HRESULT WINAPI ZDKDisplay_Cleanup(); /* System information */ HRESULT WINAPI ZDKDisplay_GetInfo(DWORD *screenWidth, DWORD *screenHeight); /* Texture management */ HRESULT WINAPI ZDKDisplay_CreateTexture(DWORD width, DWORD height, HTEXTURE *texture); HRESULT WINAPI ZDKDisplay_FreeTexture(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_GetTextureData(HTEXTURE texture, ZDK_RECT *rect, void *buffer, DWORD dataSize); HRESULT WINAPI ZDKDisplay_GetTextureInfo(HTEXTURE texture, DWORD *width, DWORD *height); HRESULT WINAPI ZDKDisplay_SetTextureData(HTEXTURE texture, ZDK_RECT *rect, void *buffer, DWORD dataSize); HRESULT WINAPI ZDKDisplay_TextureLockRect(HTEXTURE texture, ZDK_TEXTURE_LOCK_INFO *info, ZDK_RECT *rect, ZDK_TEXTURE_LOCK_FLAGS flags); HRESULT WINAPI ZDKDisplay_TextureUnlockRect(HTEXTURE texture); /* Rendering */ HRESULT WINAPI ZDKDisplay_BeginScene(); HRESULT WINAPI ZDKDisplay_Clear(DWORD color); HRESULT WINAPI ZDKDisplay_DrawSprites(ZDK_SPRITE *sprites, DWORD spriteCount); HRESULT WINAPI ZDKDisplay_EndScene(); HRESULT WINAPI ZDKDisplay_Present(); HRESULT WINAPI ZDKDisplay_ResolveBackBuffer(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetBlendMode(ZDK_BLEND_MODE blendMode); HRESULT WINAPI ZDKDisplay_SetClipRect(ZDK_RECT *rect); HRESULT WINAPI ZDKDisplay_SetRenderTarget(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetTexture(HTEXTURE texture); HRESULT WINAPI ZDKDisplay_SetTransform(ZDK_MATRIX *matrix); /* ZDKDisplay_SetTextureFilter */ /* Types */ typedef float ZDK_MATRIX[4][4]; typedef struct { int Left; int Top; int Right; int Bottom; } ZDK_RECT; typedef enum { BLEND_MODE_NONE, BLEND_MODE_ALPHA_BLEND, BLEND_MODE_ADDITIVE } ZDK_BLEND_MODE; typedef struct { float X; float Y; float U; float V; } ZDK_VERTEXDATA; typedef struct { ZDK_VERTEXDATA Vertices[4]; DWORD Color; } ZDK_SPRITE; DECLARE_HANDLE(HTEXTURE); typedef enum { TEXTURE_LOCK_DEFAULT = 0x0, TEXTURE_LOCK_READONLY = 0x10, TEXTURE_LOCK_NOSYSLOCK = 0x800, /* questionable */ TEXTURE_LOCK_NOOVERWRITE = 0x1000, /* questionable */ TEXTURE_LOCK_DISCARD = 0x2000, TEXTURE_LOCK_NO_DIRTY_UPDATE = 0x8000 /* questionable */ } ZDK_TEXTURE_LOCK_FLAGS; typedef struct { int Pitch; DWORD *Buffer; } ZDK_TEXTURE_LOCK_INFO; OpenZDK Reference","title":"zdkdisplay.h"},{"location":"OpenZDK%20Headers/zdkfont.h/","text":"zdkfont.h \u00b6 typedef enum { FONT_STYLE_ITALIC = 2, FONT_STYLE_BOLD = 4 } ZDK_FONT_STYLE; HRESULT WINAPI ZDKFont_Cleanup(); HRESULT WINAPI ZDKFont_Create(LPCWSTR typeface, float size, ZDK_FONT_STYLE style, HGDIOBJ *font); HRESULT WINAPI ZDKFont_Destroy(HGDIOBJ font); HRESULT WINAPI ZDKFont_Initialize(); /* ZDKFont_DrawCharToBuffer */ /* ZDKFont_GetCharMetrics */ /* ZDKFont_GetFontMetrics */ OpenZDK Reference","title":"zdkfont.h"},{"location":"OpenZDK%20Headers/zdkfont.h/#zdkfonth","text":"typedef enum { FONT_STYLE_ITALIC = 2, FONT_STYLE_BOLD = 4 } ZDK_FONT_STYLE; HRESULT WINAPI ZDKFont_Cleanup(); HRESULT WINAPI ZDKFont_Create(LPCWSTR typeface, float size, ZDK_FONT_STYLE style, HGDIOBJ *font); HRESULT WINAPI ZDKFont_Destroy(HGDIOBJ font); HRESULT WINAPI ZDKFont_Initialize(); /* ZDKFont_DrawCharToBuffer */ /* ZDKFont_GetCharMetrics */ /* ZDKFont_GetFontMetrics */ OpenZDK Reference","title":"zdkfont.h"},{"location":"OpenZDK%20Headers/zdkimage.h/","text":"zdkimage.h \u00b6 HRESULT WINAPI ZDKImage_CreateImageFromBuffer(const void *buffer, DWORD length, HIMAGE *image); HRESULT WINAPI ZDKImage_CreateImageFromFile(LPCWSTR path, HIMAGE *image); HRESULT WINAPI ZDKImage_GetImageData(HIMAGE image, void *buffer, DWORD length); HRESULT WINAPI ZDKImage_GetImageSize(HIMAGE image, DWORD *width, DWORD *height); HRESULT WINAPI ZDKImage_ReleaseImage(HIMAGE image); DECLARE_HANDLE(HIMAGE); OpenZDK Reference","title":"zdkimage.h"},{"location":"OpenZDK%20Headers/zdkimage.h/#zdkimageh","text":"HRESULT WINAPI ZDKImage_CreateImageFromBuffer(const void *buffer, DWORD length, HIMAGE *image); HRESULT WINAPI ZDKImage_CreateImageFromFile(LPCWSTR path, HIMAGE *image); HRESULT WINAPI ZDKImage_GetImageData(HIMAGE image, void *buffer, DWORD length); HRESULT WINAPI ZDKImage_GetImageSize(HIMAGE image, DWORD *width, DWORD *height); HRESULT WINAPI ZDKImage_ReleaseImage(HIMAGE image); DECLARE_HANDLE(HIMAGE); OpenZDK Reference","title":"zdkimage.h"},{"location":"OpenZDK%20Headers/zdkinput.h/","text":"zdkinput.h \u00b6 /* Initialization */ HRESULT WINAPI ZDKInput_Initialize(); HRESULT WINAPI ZDKInput_Shutdown(); /* State */ HRESULT WINAPI ZDKInput_GetState(ZDK_INPUT_STATE *state); /* ZDKInput_GetNextInputMessage */ /* ZDKInput_EnableInputMessages */ /* Types */ typedef struct { int X; int Y; int Z; } ZDK_ACCELEROMETER_STATE; typedef struct { unsigned int Id; float X; float Y; float Pressure; } ZDK_TOUCH_LOCATION; typedef struct { int Count; ZDK_TOUCH_LOCATION Locations[4]; } ZDK_TOUCH_STATE; typedef struct { ZDK_TOUCH_STATE TouchState; ZDK_ACCELEROMETER_STATE AccelerometerState; } ZDK_INPUT_STATE_HD; /* Zune SD types for dpad have been omitted but can be found in the original header file*/ OpenZDK Reference","title":"zdkinput.h"},{"location":"OpenZDK%20Headers/zdkinput.h/#zdkinputh","text":"/* Initialization */ HRESULT WINAPI ZDKInput_Initialize(); HRESULT WINAPI ZDKInput_Shutdown(); /* State */ HRESULT WINAPI ZDKInput_GetState(ZDK_INPUT_STATE *state); /* ZDKInput_GetNextInputMessage */ /* ZDKInput_EnableInputMessages */ /* Types */ typedef struct { int X; int Y; int Z; } ZDK_ACCELEROMETER_STATE; typedef struct { unsigned int Id; float X; float Y; float Pressure; } ZDK_TOUCH_LOCATION; typedef struct { int Count; ZDK_TOUCH_LOCATION Locations[4]; } ZDK_TOUCH_STATE; typedef struct { ZDK_TOUCH_STATE TouchState; ZDK_ACCELEROMETER_STATE AccelerometerState; } ZDK_INPUT_STATE_HD; /* Zune SD types for dpad have been omitted but can be found in the original header file*/ OpenZDK Reference","title":"zdkinput.h"}]}